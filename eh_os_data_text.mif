DEPTH = 16384;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
00000000 : 0c700513;   % 68: 	li a0, 0xc7 %
00000001 : 14000693;   % 69: 	li a3,320 %
00000002 : 0f000713;   % 70: 	li a4 240 %
00000003 : 0fc10797;   % 71: 	lw a5,frame_one %
00000004 : 5587a783;   % 71:  %
00000005 : 594000ef;   % 72: 	jal drawSquare %
00000006 : 00100513;   % 74: 	li a0,1 %
00000007 : 00a00db3;   % 78: 	mv s11, a0 	# s11 armazena qual a fase %
00000008 : 00a00c93;   % 79: 	li s9,10 	# s9 e s10 serao usados para marcar a posicao do cursos (coord_x e coord_y respectivamente) %
00000009 : 00700d13;   % 80: 	li s10,7 %
0000000a : 3d0000ef;   % 82: 	jal getLevelMap %
0000000b : 0fc10597;   % 84: 	lw a1, frame_zero %
0000000c : 5345a583;   % 84:  %
0000000d : 410000ef;   % 85: 	jal printMap		 %
0000000e : 00100513;   % 87: 	li a0,1 %
0000000f : 324000ef;   % 88: 	jal getAllies %
00000010 : 00a00c33;   % 90: 	mv s8,a0	# s8 armazena endereco dos aliados  (sera bastante usado) %
00000011 : 0fc10597;   % 92: 	la a1,Hero %
00000012 : 30858593;   % 92:  %
00000013 : 0fc10617;   % 93: 	lw a2,frame_zero	# printa aliados %
00000014 : 51462603;   % 93:  %
00000015 : 128000ef;   % 94: 	jal printCharacters %
00000016 : 00100513;   % 96: 	li a0,1 %
00000017 : 350000ef;   % 97: 	jal getEnemies %
00000018 : 00a00c33;   % 99: 	mv s8,a0	# s8 armazena endereco dos inimigos  (sera bastante usado) %
00000019 : 0fc10597;   % 101: 	la a1,Enemy	 %
0000001a : 3f058593;   % 101:  %
0000001b : 0fc10617;   % 102: 	lw a2,frame_zero	# printa inimigos %
0000001c : 4f462603;   % 102:  %
0000001d : 108000ef;   % 103: 	jal printCharacters %
0000001e : 004000ef;   % 107: 	jal runOptionsMenu	#a abre o menu de opcoes %
0000001f : 00100293;   % 111: 	li t0,1 %
00000020 : ff200337;   % 112: 	li t1, 0xFF200604  %
00000021 : 60430313;   % 112:  %
00000022 : 00530023;   % 113: 	sb t0,0(t1)	# troca de frame %
00000023 : 0fc10797;   % 115: 	lw a5,frame_one	# prepara para chamada de procedimento de drawSquare %
00000024 : 4d87a783;   % 115:  %
00000025 : 00a00393;   % 117: 	li t2,10 %
00000026 : 067cca63;   % 118: 	blt s9,t2,rightSideMenu %
00000027 : 0fc10517;   % 121: 	lb a0,menu_yellow %
00000028 : 4c250503;   % 121:  %
00000029 : 01400593;   % 122: 	li a1,20 %
0000002a : 01400613;   % 123: 	li a2,20 %
0000002b : 05200693;   % 124: 	li a3,82 %
0000002c : 00100713;   % 125: 	li a4,1 %
0000002d : ffc10113;   % 127: 	addi sp,sp,-4 %
0000002e : 00112023;   % 128: 	sw ra,0(sp) %
0000002f : 4ec000ef;   % 130: 	jal drawSquare	#desenha borda superior %
00000030 : 04600613;   % 132: 	li a2,70 %
00000031 : 4e4000ef;   % 134: 	jal drawSquare	#desenha borda inferior %
00000032 : 01400613;   % 136: 	li a2,20 %
00000033 : 00100693;   % 137: 	li a3,1 %
00000034 : 03200713;   % 138: 	li a4,50 %
00000035 : 4d4000ef;   % 141: 	jal drawSquare	#desenha borda lateral esquerda %
00000036 : 06600593;   % 142: 	li a1,102 %
00000037 : 4cc000ef;   % 144: 	jal drawSquare	#desenha borda lateral direita %
00000038 : 0fc10517;   % 146: 	lb a0, menu_blue %
00000039 : 47c50503;   % 146:  %
0000003a : 01500593;   % 147: 	li a1,21 %
0000003b : 01500613;   % 148: 	li a2,21 %
0000003c : 05100693;   % 149: 	li a3,81 %
0000003d : 03100713;   % 150: 	li a4,49 %
0000003e : 4b0000ef;   % 152: 	jal drawSquare	# desenha fundo do menu %
0000003f : 0ec000ef;   % 154: 	jal drawLeftSideMenuOptions %
00000040 : 00012083;   % 156: 	lw ra,0(sp) %
00000041 : 00410113;   % 157: 	addi sp,sp,4 %
00000042 : 00008067;   % 159: 	ret %
00000043 : 0fc10517;   % 164: 	lb a0,menu_yellow %
00000044 : 45250503;   % 164:  %
00000045 : 0da00593;   % 165: 	li a1,218 %
00000046 : 01400613;   % 166: 	li a2,20 %
00000047 : 05200693;   % 167: 	li a3,82 %
00000048 : 00100713;   % 168: 	li a4,1 %
00000049 : ffc10113;   % 170: 	addi sp,sp,-4 %
0000004a : 00112023;   % 171: 	sw ra,0(sp) %
0000004b : 47c000ef;   % 173: 	jal drawSquare	#desenha borda superior %
0000004c : 04600613;   % 175: 	li a2,70 %
0000004d : 474000ef;   % 177: 	jal drawSquare	#desenha borda inferior %
0000004e : 01400613;   % 179: 	li a2,20 %
0000004f : 00100693;   % 180: 	li a3,1 %
00000050 : 03200713;   % 181: 	li a4,50 %
00000051 : 464000ef;   % 183: 	jal drawSquare	#desenha borda lateral esquerda %
00000052 : 12c00593;   % 185: 	li a1,300 %
00000053 : 45c000ef;   % 187: 	jal drawSquare	#desenha borda lateral direita %
00000054 : 0fc10517;   % 189: 	lb a0, menu_blue %
00000055 : 40c50503;   % 189:  %
00000056 : 0db00593;   % 190: 	li a1,219 %
00000057 : 01500613;   % 191: 	li a2,21 %
00000058 : 05100693;   % 192: 	li a3,81 %
00000059 : 03100713;   % 193: 	li a4,49 %
0000005a : 440000ef;   % 195: 	jal drawSquare	# desenha fundo do menu %
0000005b : 138000ef;   % 197: 	jal drawRightSideMenuOptions %
0000005c : 00012083;   % 199: 	lw ra,0(sp) %
0000005d : 00410113;   % 200: 	addi sp,sp,4 %
0000005e : 00008067;   % 202: 	ret %
0000005f : ff410113;   % 206: 	addi sp,sp,-12			#sobrescreve s0,s1,s2 (colocar na pilha) %
00000060 : 00812023;   % 207: 	sw s0,0(sp)	 %
00000061 : 00912223;   % 208: 	sw s1,4(sp) %
00000062 : 01212423;   % 209: 	sw s2,8(sp) %
00000063 : 00a00433;   % 211: 	mv s0,a0  	# s0 contÃ©m enreco base do arquivo de character %
00000064 : 00c006b3;   % 212: 	mv a3,a2 	#preparam para chamada da funcao DrawImage %
00000065 : 00b00533;   % 213: 	mv a0,a1 %
00000066 : 00000493;   % 216: 	li s1,0 	# s1 = contador %
00000067 : 00040903;   % 217: 	lb s2,(s0)	# s2 = quantidade de characters %
00000068 : 00140413;   % 218: 	addi s0,s0,1 %
00000069 : 05248063;   % 221: 	beq s1,s2 endPrintCharacters	#se printou todos os caracteres -> finaliza procedimento %
0000006a : 00249293;   % 222: 	slli t0,s1,2 	 %
0000006b : 008282b3;   % 223: 	add t0,t0,s0 	#t0 aponta para a linha de descricao do s1-esimo character %
0000006c : 00028583;   % 225: 	lb a1,(t0) %
0000006d : 00459593;   % 226: 	slli a1,a1,4	#a1 = pos_x em pixels do personagem %
0000006e : 00128603;   % 228: 	lb a2,1(t0) %
0000006f : 00461613;   % 229: 	slli a2,a2,4	#a2 = pos_y em pixels do personafem %
00000070 : ff810113;   % 231: 	addi sp,sp,-8	#prepara a pilha para armazenar o endereco de retorno %
00000071 : 00112023;   % 232: 	sw ra,0(sp) %
00000072 : 00a12223;   % 233: 	sw a0,4(sp) %
00000073 : 370000ef;   % 235: 	jal drawImage %
00000074 : 00012083;   % 237: 	lw ra,0(sp)	#recupera o endereco de retorno %
00000075 : 00412503;   % 238: 	lw a0,4(sp) %
00000076 : 00810113;   % 239: 	addi sp,sp,8	 %
00000077 : 00148493;   % 241: 	addi s1,s1,1 %
00000078 : fc5ff06f;   % 242: 	j printCharactersLoop %
00000079 : 00008067;   % 244: 	ret %
0000007a : ff410113;   % 248: 	addi sp,sp,-12 %
0000007b : 00a12023;   % 249: 	sw a0,0(sp)		# coloca registradores na pilha %
0000007c : 00112223;   % 250: 	sw ra,4(sp) %
0000007d : 00912423;   % 251: 	sw s1,8(sp) %
0000007e : 00a004b3;   % 253: 	mv s1, a0 		# t1 esta com o indice da escolha %
0000007f : 00000293;   % 255: 	li t0,0 %
00000080 : 0fc10517;   % 257: 	la a0, atacar %
00000081 : 36850513;   % 257:  %
00000082 : 01600593;   % 258: 	li a1,22 %
00000083 : 01600613;   % 259: 	li a2,22		# adiciona as informacoes de de print do primeiro item da lista(excessao da cor) %
00000084 : 00100713;   % 260: 	li a4,1	 %
00000085 : 00549863;   % 262: 	bne s1,t0,FirstLeftOptionOpaque %
00000086 : 0000a6b7;   % 263: 	li a3,39935	#cor caso a primeira opcao  esteja selecionada %
00000087 : bff68693;   % 263:  %
00000088 : 00c0006f;   % 264: 	j paintFirstLeftMenuOption %
00000089 : 0000a6b7;   % 267: 	li a3,39844	#cor caso a primeira opcao nao esteja selecionada %
0000008a : ba468693;   % 267:  %
0000008b : 3bc000ef;   % 270: 	jal printString		#printa primeiro item da lista %
0000008c : 00100293;   % 271: 	li t0,1 %
0000008d : 0fc10517;   % 272: 	la a0,arma	 %
0000008e : 33b50513;   % 272:  %
0000008f : 01600593;   % 273: 	li a1,22 %
00000090 : 01460613;   % 274: 	addi a2,a2,20		# adiciona as informacoes de de print do segundo item da lista(excessao da cor) %
00000091 : 00549863;   % 275: 	bne s1,t0,secondLeftOptionOpaque %
00000092 : 0000a6b7;   % 276: 	li a3,39935	#cor caso a segunda opcao  esteja selecionada %
00000093 : bff68693;   % 276:  %
00000094 : 00c0006f;   % 277: 	j paintSecondLeftMenuOption %
00000095 : 0000a6b7;   % 279: 	li a3,39844		#cor caso a segunda opcao nao esteja selecionada %
00000096 : ba468693;   % 279:  %
00000097 : 38c000ef;   % 281: 	jal printString %
00000098 : 00200293;   % 282: 	li t0,2 %
00000099 : 0fc10517;   % 283: 	la a0,wait %
0000009a : 31050513;   % 283:  %
0000009b : 01600593;   % 284: 	li a1,22 %
0000009c : 01460613;   % 285: 	addi a2,a2,20 %
0000009d : 00549863;   % 286: 	bne s1,t0,ThirdLeftOptionOpaque	# adiciona as informacoes de de print do terceiro item da lista(excessao da cor)	 %
0000009e : 0000a6b7;   % 287: 	li a3,39935	#cor caso a segunda opcao  esteja selecionada %
0000009f : bff68693;   % 287:  %
000000a0 : 00c0006f;   % 288: 	j paintLeftThirdOption	 %
000000a1 : 0000a6b7;   % 290: 	li a3,39844 %
000000a2 : ba468693;   % 290:  %
000000a3 : 35c000ef;   % 292: 	jal printString		#printa terceiro item da lista %
000000a4 : 00012503;   % 294: 	lw a0,0(sp) %
000000a5 : 00412083;   % 295: 	lw ra,4(sp)			#restaura a0 e ra com valores da pilha %
000000a6 : 00812483;   % 296: 	lw s1,8(sp) %
000000a7 : 00c10113;   % 297: 	addi sp,sp,12 %
000000a8 : 00008067;   % 298: 	ret %
000000a9 : ff410113;   % 302: 	addi sp,sp,-12		 %
000000aa : 00a12023;   % 303: 	sw a0,0(sp)		# coloca registradores na pilha %
000000ab : 00112223;   % 304: 	sw ra,4(sp) %
000000ac : 00912423;   % 305: 	sw s1,8(sp) %
000000ad : 00a004b3;   % 307: 	mv s1, a0 		# t1 esta com o indice da escolha %
000000ae : 00000293;   % 309: 	li t0,0 %
000000af : 0fc10517;   % 311: 	la a0, atacar %
000000b0 : 2ac50513;   % 311:  %
000000b1 : 0db00593;   % 312: 	li a1,219 %
000000b2 : 01600613;   % 313: 	li a2,22		# adiciona as informacoes de de print do primeiro item da lista(excessao da cor) %
000000b3 : 00100713;   % 314: 	li a4,1	 %
000000b4 : 00549863;   % 316: 	bne s1,t0,FirstRightOptionOpaque %
000000b5 : 0000a6b7;   % 317: 	li a3,39935	#cor caso a primeira opcao  esteja selecionada %
000000b6 : bff68693;   % 317:  %
000000b7 : 00c0006f;   % 318: 	j paintFirstRightMenuOption %
000000b8 : 0000a6b7;   % 321: 	li a3,39844	#cor caso a primeira opcao nao esteja selecionada %
000000b9 : ba468693;   % 321:  %
000000ba : 300000ef;   % 324: 	jal printString		#printa primeiro item da lista %
000000bb : 00100293;   % 325: 	li t0,1 %
000000bc : 0fc10517;   % 326: 	la a0,arma	 %
000000bd : 27f50513;   % 326:  %
000000be : 0db00593;   % 327: 	li a1,219 %
000000bf : 01460613;   % 328: 	addi a2,a2,20		# adiciona as informacoes de de print do segundo item da lista(excessao da cor) %
000000c0 : 00549863;   % 329: 	bne s1,t0,secondRightOptionOpaque %
000000c1 : 0000a6b7;   % 330: 	li a3,39935	#cor caso a segunda opcao  esteja selecionada %
000000c2 : bff68693;   % 330:  %
000000c3 : 00c0006f;   % 331: 	j paintSecondRightMenuOption %
000000c4 : 0000a6b7;   % 333: 	li a3,39844		#cor caso a segunda opcao nao esteja selecionada %
000000c5 : ba468693;   % 333:  %
000000c6 : 2d0000ef;   % 335: 	jal printString		#printa segundo item da lista %
000000c7 : 00200293;   % 336: 	li t0,2		 %
000000c8 : 0fc10517;   % 337: 	la a0,wait %
000000c9 : 25450513;   % 337:  %
000000ca : 0db00593;   % 338: 	li a1,219 %
000000cb : 01460613;   % 339: 	addi a2,a2,20 %
000000cc : 00549863;   % 340: 	bne s1,t0,ThirdRightOptionOpaque	# adiciona as informacoes de de print do terceiro item da lista(excessao da cor)	 %
000000cd : 0000a6b7;   % 341: 	li a3,39935 #cor caso a segunda opcao  esteja selecionada %
000000ce : bff68693;   % 341:  %
000000cf : 00c0006f;   % 342: 	j paintRightThirdOption	 %
000000d0 : 0000a6b7;   % 344: 	li a3,39844 %
000000d1 : ba468693;   % 344:  %
000000d2 : 2a0000ef;   % 346: 	jal printString		#printa terceiro item da lista %
000000d3 : 00012503;   % 349: 	lw a0,0(sp)		# restaura pilha pilha %
000000d4 : 00412083;   % 350: 	lw ra,4(sp) %
000000d5 : 00812483;   % 351: 	lw s1,8(sp) %
000000d6 : 00c10113;   % 352: 	addi sp,sp,12	 %
000000d7 : 00008067;   % 354: 	ret %
000000d8 : 00100293;   % 359: 	 li t0,1 %
000000d9 : 02550663;   % 360: 	 beq a0, t0,alliesLevel1  #checa se a0=1 %
000000da : 00128293;   % 361: 	 addi t0,t0,1 %
000000db : 02550863;   % 362: 	 beq a0,t0,alliesLevel2 #checa se a0=2 %
000000dc : 00128293;   % 363: 	 addi t0,t0,1 %
000000dd : 02550663;   % 364: 	 beq a0,t0,alliesLevel3 #checa se a0=3 %
000000de : 00128293;   % 365: 	 addi t0,t0,1 %
000000df : 02550463;   % 366: 	 beq a0,t0,alliesLevel4 #checa se a0=4 %
000000e0 : 00128293;   % 367: 	 addi t0,t0,1 %
000000e1 : 02550263;   % 368: 	 beq a0,t0,alliesLevel5 #checa se a0=5 %
000000e2 : fff00513;   % 369: 	 li a0,-1 %
000000e3 : 00008067;   % 370: 	 ret %
000000e4 : 0fc10517;   % 373: 	la a0,allies_fase1 %
000000e5 : fac50513;   % 373:  %
000000e6 : 00008067;   % 374: 	ret %
000000e7 : 00008067;   % 377: 	ret %
000000e8 : 00008067;   % 380: 	ret %
000000e9 : 00008067;   % 383: 	ret %
000000ea : 00008067;   % 386: 	ret %
000000eb : 00100293;   % 389: 	 li t0,1 %
000000ec : 02550663;   % 390: 	 beq a0, t0,enemiesLevel1  #checa se a0=1 %
000000ed : 00128293;   % 391: 	 addi t0,t0,1 %
000000ee : 02550863;   % 392: 	 beq a0,t0,enemiesLevel2 #checa se a0=2 %
000000ef : 00128293;   % 393: 	 addi t0,t0,1 %
000000f0 : 02550663;   % 394: 	 beq a0,t0,enemiesLevel3 #checa se a0=3 %
000000f1 : 00128293;   % 395: 	 addi t0,t0,1 %
000000f2 : 02550463;   % 396: 	 beq a0,t0,enemiesLevel4 #checa se a0=4 %
000000f3 : 00128293;   % 397: 	 addi t0,t0,1 %
000000f4 : 02550263;   % 398: 	 beq a0,t0,enemiesLevel5 #checa se a0=5 %
000000f5 : fff00513;   % 399: 	 li a0,-1 %
000000f6 : 00008067;   % 400: 	 ret %
000000f7 : 0fc10517;   % 403: 	la a0,enemies_fase1 %
000000f8 : f6550513;   % 403:  %
000000f9 : 00008067;   % 404: 	ret %
000000fa : 00008067;   % 407: 	ret %
000000fb : 00008067;   % 410: 	ret %
000000fc : 00008067;   % 413: 	ret %
000000fd : 00008067;   % 416: 	ret %
000000fe : 00100293;   % 419: 	 li t0,1 %
000000ff : 02550663;   % 420: 	 beq a0, t0,mapLevel1  #checa se a0=1 %
00000100 : 00128293;   % 421: 	 addi t0,t0,1 %
00000101 : 02550863;   % 422: 	 beq a0,t0,mapLevel2 #checa se a0=2 %
00000102 : 00128293;   % 423: 	 addi t0,t0,1 %
00000103 : 02550663;   % 424: 	 beq a0,t0,mapLevel3 #checa se a0=3 %
00000104 : 00128293;   % 425: 	 addi t0,t0,1 %
00000105 : 02550463;   % 426: 	 beq a0,t0,mapLevel4 #checa se a0=4 %
00000106 : 00128293;   % 427: 	 addi t0,t0,1 %
00000107 : 02550263;   % 428: 	 beq a0,t0,mapLevel5 #checa se a0=5 %
00000108 : fff00513;   % 429: 	 li a0,-1 %
00000109 : 00008067;   % 430: 	 ret %
0000010a : 0fc10517;   % 433: 	la a0,Mapa_fase1 %
0000010b : de850513;   % 433:  %
0000010c : 00008067;   % 434: 	ret %
0000010d : 00008067;   % 437: 	ret %
0000010e : 00008067;   % 440: 	ret %
0000010f : 00008067;   % 443: 	ret %
00000110 : 00008067;   % 446: 	ret %
00000111 : ff010113;   % 450: 	addi sp,sp, -16 %
00000112 : 00912023;   % 451: 	sw s1,0(sp) %
00000113 : 01212223;   % 452: 	sw s2,4(sp) %
00000114 : 01312423;   % 453: 	sw s3,8(sp) %
00000115 : 01412623;   % 454: 	sw s4,12(sp) %
00000116 : 00a004b3;   % 456: 	mv s1,a0	# s1 = endereco inicial do arquivo de mapa %
00000117 : 12c00913;   % 458: 	li s2, 300	# s2 = quantidade de bytes por arquivos de mapa %
00000118 : 00a90933;   % 459: 	add s2,s2,a0 	# s2 =  endereco final do arquivo de mapa %
00000119 : 00000993;   % 460: 	li s3, 0	# s3 = contador utilizado para posiÃ§Ãµes %
0000011a : 14000a13;   % 461: 	li s4,320	# s4 = numero utilizado em contas  %
0000011b : 00b006b3;   % 462: 	mv a3, a1	# coloca em a3 o endereco da frame para ser utilizado peloi drawImage 	 %
0000011c : 05248663;   % 465: 	beq s1,s2,printMapEnd 	# checa condicao de parada %
0000011d : 00900533;   % 466: 	mv a0,s1	 %
0000011e : 00050503;   % 467: 	lb a0,0(a0) %
0000011f : ffc10113;   % 469: 	addi sp,sp,-4 %
00000120 : 00112023;   % 470: 	sw ra,0(sp) %
00000121 : 03c000ef;   % 472: 	jal getTile 		# armazena endereco do tile em a0 %
00000122 : 00012083;   % 474: 	lw ra,0(sp) %
00000123 : 00410113;   % 475: 	addi sp,sp,4 %
00000124 : 0349e5b3;   % 478: 	rem a1,s3,s4		# a1 = coord_x %
00000125 : 0349c633;   % 479: 	div a2,s3,s4		 %
00000126 : 00461613;   % 480: 	slli a2,a2,4		# a2 = coord_y %
00000127 : ffc10113;   % 482: 	addi sp,sp,-4 %
00000128 : 00112023;   % 483: 	sw ra,0(sp) %
00000129 : 098000ef;   % 485: 	jal drawImage 		#pinta character %
0000012a : 00012083;   % 487: 	lw ra,0(sp) %
0000012b : 00410113;   % 488: 	addi sp,sp,4 %
0000012c : 00148493;   % 491: 	addi s1,s1,1 %
0000012d : 01098993;   % 492: 	addi s3,s3,16 %
0000012e : fb9ff06f;   % 493: 	j printMapLoop %
0000012f : 00008067;   % 496: 	ret %
00000130 : 00100293;   % 501: 	li t0,1 %
00000131 : 00550a63;   % 502: 	beq a0,t0,grassTile %
00000132 : 00128293;   % 503: 	addi t0,t0,1 %
00000133 : 00550c63;   % 504: 	beq a0,t0,bushTile %
00000134 : fff00513;   % 505: 	li a0,-1 %
00000135 : 00008067;   % 506: 	ret %
00000136 : 0fc10517;   % 508: 	la a0, Grass %
00000137 : c3050513;   % 508:  %
00000138 : 00008067;   % 509: 	ret %
00000139 : 0fc10517;   % 511: 	la a0,Bush %
0000013a : b1c50513;   % 511:  %
0000013b : 00008067;   % 512: 	ret %
0000013c : ff200337;   % 522: 	li t1, 0xFF200000	# Carrega o endereco de status do KDMMIO %
0000013d : 00030313;   % 522:  %
0000013e : 00032283;   % 524: 	lw t0, 0(t1)		# Carrega o status do teclado %
0000013f : 0012f293;   % 525: 	andi t0, t0, 0x0001	# Mascara o bit menos significativo. %
00000140 : fe028ce3;   % 526: 	beq t0, zero, rkb_loop	# Se nao houver tecla pressionada repete ate que o usuario aperte algo %
00000141 : 00432503;   % 527: 	lw a0, 4(t1)		# Carrega o caractere que foi pressionado %
00000142 : 00a32623;   % 528: 	sw a0, 12(t1)		# Escreve o caractere lido no display  %
00000143 : 00008067;   % 529: 	ret	 %
00000144 : 00a00893;   % 532: 	li a7, 10 %
00000145 : 00000073;   % 533: 	ecall %
00000146 : ff200337;   % 543: 	li t1, 0xFF200000	# Carrega o endereÃ§o de status do KDMMIO %
00000147 : 00030313;   % 543:  %
00000148 : 00032283;   % 544: 	lw t0, 0(t1)		# Carrega o status do teclado %
00000149 : 0012f293;   % 545: 	andi t0, t0, 0x0001	# Mascara o bit menos significativo %
0000014a : 00028863;   % 546: 	beq t0, zero, rknb_end	# Se nÃ£o houver tecla pressionada continua %
0000014b : 00432383;   % 547: 	lw t2, 4(t1)		# Carrega o caractere que foi pressionado %
0000014c : 00432503;   % 548: 	lw a0, 4(t1)		# Carrega em a0 (vari?vel de retorno) o caractere %
0000014d : 00732623;   % 549: 	sw t2, 12(t1)		# Escreve o caractere lido no display %
0000014e : 00008067;   % 551: 	ret			#retorna  %
0000014f : 00052283;   % 557: 	lw t0,0(a0)	# t0 armazena largura da imagem %
00000150 : 00452303;   % 558: 	lw t1,4(a0)	# t1 armazena altura da imagem %
00000151 : 14000393;   % 560: 	li t2,320 %
00000152 : 027603b3;   % 561: 	mul t2,a2,t2 %
00000153 : 00b383b3;   % 562: 	add t2,t2,a1 %
00000154 : 00d383b3;   % 563: 	add t2,t2,a3	# t2 armazena endereco inicial/atual da Ã¡rea de pintura %
00000155 : 14000e13;   % 565: 	li t3,320 %
00000156 : 026e0e33;   % 566: 	mul t3,t3,t1 %
00000157 : 005e0e33;   % 567: 	add t3,t3,t0 %
00000158 : 007e0e33;   % 568: 	add t3,t3,t2 	# t3 armazena enderÃ§o final da Ã¡rea de pintura %
00000159 : ec0e0e13;   % 569: 	addi t3,t3,-320 %
0000015a : 00850513;   % 571: 	addi a0,a0,8	# muda a0 para o endereÃ§o inicial das cores %
0000015b : 00000f13;   % 572: 	li t5,0 	# t5 Ã© um marcador de passos Ã  direita %
0000015c : 0c700e93;   % 573: 	li t4, 0xC7 %
0000015d : 03c38863;   % 576: 	beq t2,t3,finishDraw # se endereÃ§o atual = endereÃ§o final, finaliza pintura %
0000015e : 005f1863;   % 577: 	bne t5,t0, keepDraw %
0000015f : 14038393;   % 579: 	addi t2,t2,320		#muda t2 para primeira posiÃ§Ã£o da linha debaixo %
00000160 : 405383b3;   % 580: 	sub t2,t2,t0	 %
00000161 : 00000f33;   % 581: 	add t5,zero,zero %
00000162 : 00050f83;   % 583: 	lb t6,(a0) # t6 carrega coloraÃ§Ã£o do pixel %
00000163 : 01fe8463;   % 584: 	beq t4,t6,transparent %
00000164 : 01f38023;   % 585: 	sb t6,0(t2) %
00000165 : 00138393;   % 587: 	addi t2,t2,1  # muda para pÃ³ximo endereÃ§o %
00000166 : 001f0f13;   % 588: 	addi t5,t5,1  #passa o contador de passos para a direita %
00000167 : 00150513;   % 589: 	addi a0,a0,1 %
00000168 : fd5ff06f;   % 590: 	j drawLoop %
00000169 : 00008067;   % 592: 	ret %
0000016a : 00000293;   % 595: 	li t0,0  	# iterador para altura %
0000016b : 02e28c63;   % 597: 	beq t0,a4,endDrawSquare %
0000016c : 00000313;   % 598: 	li t1,0		# iterador para largura %
0000016d : 02d30463;   % 600: 	beq t1,a3,endInnerLoop  %
0000016e : 00b303b3;   % 602: 	add t2,t1,a1  	# t2 = pos_x do ponto %
0000016f : 00c28e33;   % 603: 	add t3,t0,a2	# t3 = pos_y do ponto %
00000170 : 00f383b3;   % 605: 	add t2,t2,a5 %
00000171 : 14000e93;   % 607: 	li t4,320 %
00000172 : 03ce8e33;   % 608: 	mul t3, t4,t3	 %
00000173 : 007e0e33;   % 610: 	add t3,t3,t2	# t3 = endereco na memoria %
00000174 : 00ae0023;   % 612: 	sb a0,(t3) %
00000175 : 00130313;   % 614: 	addi t1,t1,1 %
00000176 : fddff06f;   % 615: 	j drawSquareInnerLoop %
00000177 : 00128293;   % 617: 	addi t0,t0,1 %
00000178 : fcdff06f;   % 618: 	j drawSquareOutterLoop %
00000179 : 00008067;   % 620: 	ret %
0000017a : ff810113;   % 633: 		addi	sp, sp, -8			# aloca espaco %
0000017b : 00112023;   % 634:     		sw	ra, 0(sp)			# salva ra %
0000017c : 00812223;   % 635:     		sw	s0, 4(sp)			# salva s0 %
0000017d : 00a00433;   % 636:     		mv	s0, a0              		# s0 = endereco do caractere na string %
0000017e : 00040503;   % 638: loopprintString:lb	a0, 0(s0)                 	# le em a0 o caracter a ser impresso %
0000017f : 02050263;   % 640:     		beq     a0, zero, fimloopprintString	# string ASCIIZ termina com NULL %
00000180 : 030000ef;   % 642:     		jal     printChar       		# imprime char %
00000181 : 00858593;   % 644: 		addi    a1, a1, 8                 	# incrementa a coluna %
00000182 : 13900f93;   % 645: 		li 	t6, 313		 %
00000183 : 01f5c663;   % 646: 		blt	a1, t6, NaoPulaLinha	    	# se ainda tiver lugar na linha %
00000184 : 00860613;   % 647:     		addi    a2, a2, 8                 	# incrementa a linha %
00000185 : 000005b3;   % 648:     		mv    	a1, zero			# volta a coluna zero %
00000186 : 00140413;   % 650: NaoPulaLinha:	addi    s0, s0, 1			# proximo caractere %
00000187 : fddff06f;   % 651:     		j       loopprintString       		# volta ao loop %
00000188 : 00012083;   % 653: fimloopprintString:	lw      ra, 0(sp)    		# recupera ra %
00000189 : 00012403;   % 654: 			lw 	s0, 0(sp)		# recupera s0 original %
0000018a : 00810113;   % 655:     			addi    sp, sp, 8		# libera espaco %
0000018b : 00008067;   % 656: fimprintString:	ret      	    			# retorna %
0000018c : 0ff00e93;   % 678: printChar:	li 	t4, 0xFF	# t4 temporario %
0000018d : 008e9e93;   % 679: 		slli 	t4, t4, 8	# t4 = 0x0000FF00 (no RARS, nao podemos fazer diretamente "andi rd, rs1, 0xFF00") %
0000018e : 01d6ff33;   % 680: 		and    	t5, a3, t4   	# t5 obtem cor de fundo %
0000018f : 008f5f13;   % 681:     		srli	t5, t5, 8	# numero da cor de fundo %
00000190 : 0ff6ff93;   % 682: 		andi   	t6, a3, 0xFF    # t6 obtem cor de frente %
00000191 : 02000213;   % 684: 		li 	tp, ' ' %
00000192 : 00454863;   % 685: 		blt 	a0, tp, printChar.NAOIMPRIMIVEL	# ascii menor que 32 nao eh imprimivel %
00000193 : 07e00213;   % 686: 		li 	tp, '~' %
00000194 : 00a24463;   % 687: 		bgt	a0, tp, printChar.NAOIMPRIMIVEL	# ascii Maior que 126  nao eh imprimivel %
00000195 : 0080006f;   % 688:     		j       printChar.IMPRIMIVEL %
00000196 : 02000513;   % 690: printChar.NAOIMPRIMIVEL: li      a0, 32		# Imprime espaco %
00000197 : 14000213;   % 692: printChar.IMPRIMIVEL:	li	tp, 320		# Num colunas 320 %
00000198 : 02c20eb3;   % 693: 			mul t4,tp,a2 %
00000199 : 0080006f;   % 694: 			j printChar.mul1d %
0000019a : 02c20eb3;   % 695: printChar.mul1:		mul     t4, tp, a2			# multiplica a2x320  t4 = coordenada y %
0000019b : 00be8eb3;   % 696: printChar.mul1d:	add     t4, t4, a1               	# t4 = 320*y + x %
0000019c : 007e8e93;   % 697: 			addi    t4, t4, 7                 	# t4 = 320*y + (x+7) %
0000019d : ff000237;   % 698: 			li      tp, 0xFF000000          	# Endereco de inicio da memoria VGA0 %
0000019e : 00020213;   % 698:  %
0000019f : 00070663;   % 699: 			beq 	a4, zero, printChar.PULAFRAME		# Verifica qual o frame a ser usado em a4 %
000001a0 : ff100237;   % 700: 			li      tp, 0xFF100000          	# Endereco de inicio da memoria VGA1 %
000001a1 : 00020213;   % 700:  %
000001a2 : 004e8eb3;   % 701: printChar.PULAFRAME:	add     t4, t4, tp               	# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
000001a3 : fe050393;   % 702: 			addi    t2, a0, -32               	# indice do char na memoria %
000001a4 : 00339393;   % 703: 			slli    t2, t2, 3                 	# offset em bytes em relacao ao endereco inicial %
000001a5 : 0fc10e17;   % 704: 			la      t3, LabelTabChar		# endereco dos caracteres na memoria %
000001a6 : eece0e13;   % 704:  %
000001a7 : 01c383b3;   % 705: 			add     t2, t2, t3               	# endereco do caractere na memoria %
000001a8 : 0003ae03;   % 706: 			lw      t3, 0(t2)                 	# carrega a primeira word do char %
000001a9 : 00400293;   % 707: 			li 	t0, 4				# i=4 %
000001aa : 02028e63;   % 709: printChar.forChar1I:	beq     t0, zero, printChar.endForChar1I # if(i == 0) end for i %
000001ab : 00800313;   % 710:     			addi    t1, zero, 8               	# j = 8 %
000001ac : 02030463;   % 712: printChar.forChar1J:	beq     t1, zero, printChar.endForChar1J # if(j == 0) end for j %
000001ad : 001e7c93;   % 713:         		andi    s9, t3, 0x001			# primeiro bit do caracter %
000001ae : 001e5e13;   % 714:         		srli    t3, t3, 1             		# retira o primeiro bit %
000001af : 000c8663;   % 715:         		beq     s9, zero, printChar.printCharPixelbg1	# pixel eh fundo? %
000001b0 : 01fe8023;   % 716:         		sb      t6, 0(t4)             		# imprime pixel com cor de frente %
000001b1 : 0080006f;   % 717:         		j       printChar.endCharPixel1 %
000001b2 : 01ee8023;   % 718: printChar.printCharPixelbg1:	sb      t5, 0(t4)                # imprime pixel com cor de fundo %
000001b3 : fff30313;   % 719: printChar.endCharPixel1: addi    t1, t1, -1                	# j-- %
000001b4 : fffe8e93;   % 720:     			addi    t4, t4, -1                	# t4 aponta um pixel para a esquerda %
000001b5 : fddff06f;   % 721:     			j       printChar.forChar1J		# vollta novo pixel %
000001b6 : fff28293;   % 723: printChar.endForChar1J: addi    t0, t0, -1 		# i-- %
000001b7 : 148e8e93;   % 724:     			addi    t4, t4, 328           	# 2**12 + 8 %
000001b8 : fc9ff06f;   % 725:     			j       printChar.forChar1I	# volta ao loop %
000001b9 : 0043ae03;   % 727: printChar.endForChar1I:	lw      t3, 4(t2)           	# carrega a segunda word do char %
000001ba : 00400293;   % 728: 			li 	t0, 4			# i = 4 %
000001bb : 02028e63;   % 729: printChar.forChar2I:    beq     t0, zero, printChar.endForChar2I  # if(i == 0) end for i %
000001bc : 00800313;   % 730:     			addi    t1, zero, 8             # j = 8 %
000001bd : 02030463;   % 732: printChar.forChar2J:	beq	t1, zero, printChar.endForChar2J # if(j == 0) end for j %
000001be : 001e7c93;   % 733:         		andi    s9, t3, 0x001	    		# pixel a ser impresso %
000001bf : 001e5e13;   % 734:         		srli    t3, t3, 1                 	# desloca para o proximo %
000001c0 : 000c8663;   % 735:         		beq     s9, zero, printChar.printCharPixelbg2 # pixel eh fundo? %
000001c1 : 01fe8023;   % 736:         		sb      t6, 0(t4)			# imprime cor frente %
000001c2 : 0080006f;   % 737:         		j       printChar.endCharPixel2		# volta ao loop %
000001c3 : 01ee8023;   % 739: printChar.printCharPixelbg2:	sb      t5, 0(t4)		# imprime cor de fundo %
000001c4 : fff30313;   % 741: printChar.endCharPixel2:	addi    t1, t1, -1		# j-- %
000001c5 : fffe8e93;   % 742:     				addi    t4, t4, -1              # t4 aponta um pixel para a esquerda %
000001c6 : fddff06f;   % 743:     				j       printChar.forChar2J %
000001c7 : fff28293;   % 745: printChar.endForChar2J:	addi	t0, t0, -1 		# i-- %
000001c8 : 148e8e93;   % 746:     			addi    t4, t4, 328		# %
000001c9 : fc9ff06f;   % 747:     			j       printChar.forChar2I	# volta ao loop %
000001ca : 00008067;   % 749: printChar.endForChar2I:	ret	 %
END;
